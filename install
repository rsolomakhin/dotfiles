#!/bin/bash
#
# Copyright 2015 Rouslan Solomakhin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARGS=$@

FORCE=0
if [ "$ARGS" == "--force" ]; then
  FORCE=1
  echo "Forcing builds and installs"
elif [ -n "$ARGS" ]; then
  echo "Usage: ./install [--force]"
  exit 1
fi

[ "`uname | grep CYGWIN`" == "" ] && CYGWIN=0 || CYGWIN=1

die() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
  exit 1
}

pushd $(dirname ${BASH_SOURCE[0]}) || die "Cannot go into ${BASH_SOURCE[0]} dir"

git config user.email "rouslan.solomakhin@gmail.com" \
  || die "Cannot set git user email for this repository"
git config --global --get user.email \
  || git config --global user.email "rouslan.solomakhin@gmail.com" \
  || die "Cannot set global git user email"
git config --global --replace-all alias.br branch || die "Cannot alias git br"
git config --global --replace-all alias.brv "branch -vv" \
  || die "Cannot alias git brv"
git config --global --replace-all alias.can "commit -a --amend --no-edit" \
  || die "Cannot alias git can"
git config --global --replace-all alias.co checkout || die "Cannot alias git co"
git config --global --replace-all alias.ls ls-files || die "Cannot alias git ls"
git config --global --replace-all alias.st status || die "Cannot alias git st"
git config --global --replace-all alias.sub \
  "submodule update --init --recursive" || die "Cannot alias git sub"
git config --global --replace-all color.ui auto \
  || die "Cannot enable git colors"
git config --global --replace-all core.autocrlf false \
  || die "Cannot set git autoclrf"
git config --global --replace-all core.excludesfile ~/.cvsignore \
  || die "Cannot set git excludes file"
git config --global --replace-all core.filemode false \
  || die "Cannot disable git filemode"
git config --global --replace-all http.cookiefile ~/.gitcookies \
  || die "Cannot set git cookie file"
git config --global --replace-all user.name "Rouslan Solomakhin" \
  || die "Cannot set git user name"
git config --global push.default simple || die "Cannot set simple push"

git submodule update --init --recursive || die "Cannot update submodules"

mkdir -pv ~/node/bin || die "Cannot create ~/node/bin dir"
mkdir -pv ~/python/bin || die "Cannot create ~/python/bin dir"
mkdir -pv ~/.vim/swap || die "Cannot create the vim swap dir"
mkdir -pv ~/.vim/spell || die "Cannot create the vim spell dir"
mkdir -pv ~/.vim/autoload || die "Cannot create vim autoload dir"
mkdir -pv ~/software/bin || die "Cannot create the software dir"
mkdir -pv ~/android-sdk || die "Cannot create the android-sdk dir"

export GOPATH=$HOME/go || die "Cannot set the go path"
export PATH=$GOPATH/bin:$PATH || die "Cannot add ~/go/bin to the path"
export PATH=$HOME/node/bin:$PATH || die "Cannot add ~/node/bin to the path"
export PATH=$HOME/python/bin:$PATH || die "Cannot add ~/python/bin to the path"
export PATH=$HOME/.rvm/bin:$PATH || die "Cannot add ~/.rvm/bin to the path"
export PATH=$HOME/software/bin:$PATH \
  || die "Cannot add ~/software/bin to the path"

CONFIGS="cvsignore tmux.conf vim/bundle bashrc bash_profile vimrc tern-config emacs eslintrc"
PROGS="cmake tmux"

which apt-get >& /dev/null
if [ $? -eq 0 ]; then
  CONFIGS="$CONFIGS fluxbox/apps fluxbox/menu fluxbox/startup fluxbox/init fluxbox/keys fluxbox/windowmenu Xresources config/pulse/client.conf"
  PROGS="$PROGS curl golang fluxbox python-dev gnome-screensaver gnome-screenshot gstreamer1.0-libav"
  for prog in $PROGS; do
    which $prog >& /dev/null
    if [ $? -ne 0 -o $FORCE -eq 1 ]; then
      sudo apt-get install $PROGS || die "Cannot install $prog"
    fi
  done
  which inotifywait >& /dev/null
  if [ $? -ne 0 -o $FORCE -eq 1 ]; then
    sudo apt-get install inotify-tools || die "Cannot install inotify-tools"
  fi
  if [ ! -f ~/node/bin/node -o $FORCE -eq 1 ]; then
    echo "Downloading nodejs"
    curl https://nodejs.org/dist/v7.3.0/node-v7.3.0-linux-x64.tar.xz \
      | tar xJ --strip 1 -C ~/node || die "Cannot download nodejs"
  fi
  if [ ! -f ~/.rvm/bin/rvm -o $FORCE -eq 1 ]; then
    gpg --keyserver hkp://keys.gnupg.net --recv-keys \
      409B6B1796C275462A1703113804BB82D39DC0E3 || die "Cannot get rvm key"
    curl -LSso /tmp/rvm-installer \
      https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer \
      || die "Cannot download rvm-installer"
    curl -LSso /tmp/rvm-installer.asc \
      https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer.asc \
      || die "Cannot download rvm signature"
    gpg --verify /tmp/rvm-installer.asc || die "Rvm signature does not match"
    bash /tmp/rvm-installer stable || die "Cannot install rvm"
  fi
  if [ ! -f ~/google-cloud-sdk/bin/gcloud -o $FORCE -eq 1 ]; then
    echo "Downloading Google cloud SDK"
    curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-139.0.1-linux-x86_64.tar.gz \
      | tar xz -C ~ || die "Cannot download Google cloud SDK"
  fi
  if [ ! -f ~/android-sdk/tools/android -o $FORCE -eq 1 ]; then
    echo "Downloading Android SDK"
    curl -LSso /tmp/android-sdk.zip \
      https://dl.google.com/android/repository/tools_r25.2.3-linux.zip \
      || die "Cannot download Android SDK"
    pushd ~/android-sdk || die "Cannot change directory to Android SDK"
    unzip /tmp/android-sdk.zip || die "Cannot unzip Android SDK"
    popd || die "Cannot go back in directory stack"
  fi
  if [ ! -f ~/android-studio/bin/studio.sh -o $FORCE -eq 1 ]; then
    echo "Downloading Android Studio"
    curl -LSso /tmp/android-studio.zip \
      https://dl.google.com/dl/android/studio/ide-zips/2.2.3.0/android-studio-ide-145.3537739-linux.zip \
      || die "Cannot download Android Studio"
    pushd ~ || die "Cannot change directory to home dir"
    unzip /tmp/android-studio.zip || die "Cannot unzip Android Studio"
    popd || die "Cannot go back in directory stack"
  fi
  if [ ! -f ~/.rvm/rubies/ruby-2.3.3/bin/ruby -o $FORCE -eq 1 ]; then
    rvm install 2.3 || die "Cannot install ruby"
  fi
  if [ ! -e ~/.Xresources-hybrid -o $FORCE -eq 1 ]; then
    curl -LSso ~/.Xresources-hybrid \
      https://gist.githubusercontent.com/w0ng/3278077/raw/4c9e1510a7ade25b787efed0ad435234c0af1ba5/.Xresources-hybrid \
      || die "Cannot download hybrid them for xterm"
  fi
elif [ "`uname | grep CYGWIN`" == "" ]; then
  export PATH=$HOME/homebrew/bin:$PATH \
    || die "Cannot add ~/homebrew/bin to the path"
  which brew >& /dev/null
  if [ $? -ne 0 -o $FORCE -eq 1 ]; then
    echo "Installing homebrew"
    mkdir -pv ~/homebrew || die "Cannot create ~/homebrew dir"
    curl -L https://github.com/Homebrew/brew/tarball/master \
      | tar xz --strip 1 -C ~/homebrew \
      || die "Cannot download homebrew"
  else
    brew update || die "Cannot update homebrew formulae"
    brew upgrade --all || die "Cannot upgrade all homebrew packages"
  fi
  PROGS="$PROGS go bash vim clang-format"
  for prog in $PROGS; do
    which $prog >& /dev/null
    if [ $? -ne 0 -o $FORCE -eq 1 ]; then
      brew install $PROGS || die "Cannot install $prog"
    fi
  done
fi

if [ ! -e ~/.emacs.d/google-c-style.el -o $FORCE -eq 1 ]; then
  mkdir -p ~/.emacs.d/ || die "Cannot create .emacs.d dir"
  curl -LSso ~/.emacs.d/google-c-style.el \
    https://raw.githubusercontent.com/google/styleguide/gh-pages/google-c-style.el \
    || die "Cannot download google-c-style.el"
fi

for file in $CONFIGS; do
  mkdir -pv ~/.`dirname $file` || die "Cannot create the dir for $file"
  rm -rfv ~/.$file || die "Cannot remove the old $file"
  ln -sfv $PWD/$file ~/.$file || die "Cannot link $file to home dir"
done

rm -rfv ~/.profile || die "Cannot clean up the .profile file"

if [ $CYGWIN -eq 0 ]; then
  NODE_MODULES="eslint eslint-config-google csslint typescript tern gulp bower js-beautify"
  for mod in $NODE_MODULES; do
    if [ ! -e ~/node/lib/node_modules/$mod -o $FORCE -eq 1 ]; then
      npm install --global --prefix=$HOME/node $mod \
        || die "Cannot install $mod"
    fi
  done
fi

if [ ! -e ~/.vim/autoload/plug.vim -o $FORCE -eq 1 ]; then
  echo "Installing vim-plug"
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
    || die "Cannot download vim-plug"
fi

if [ $CYGWIN -eq 0 ]; then
  YCM_OUTPUT=third_party/ycmd/ycm_core.so
  if [ ! -e $YCM_OUTPUT -o $FORCE -eq 1 ]; then
    pushd third_party/ycmd || die "Cannot change dir to ycmd for emacs and atom"
    ./build.py --clang-completer --gocode-completer --tern-completer \
      || die "Cannot build ycmd for emacs and atom"
    popd || die "Cannot go back from ycmd dir for emacs and atom"
  fi
fi
