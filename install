#!/bin/bash
#
# Copyright 2015 Rouslan Solomakhin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARGS=$@

FORCE=0
if [ "$ARGS" == "--force" ]; then
  FORCE=1
  echo "Forcing builds and installs"
elif [ -n "$ARGS" ]; then
  echo "Usage: ./install [--force]"
  exit 1
fi

die() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
  exit 1
}

pushd $(dirname ${BASH_SOURCE[0]})

git config user.email "rouslan.solomakhin@gmail.com" \
  || die "Cannot set git user email for this repository"
git config --global --get user.email \
  || git config --global user.email "rouslan.solomakhin@gmail.com" \
  || die "Cannot set global git user email"
git config --global --replace-all alias.br branch || die "Cannot alias git br"
git config --global --replace-all alias.brv "branch -vv" \
  || die "Cannot alias git brv"
git config --global --replace-all alias.can "commit -a --amend --no-edit" \
  || die "Cannot alias git can"
git config --global --replace-all alias.co checkout || die "Cannot alias git co"
git config --global --replace-all alias.ls ls-files || die "Cannot alias git ls"
git config --global --replace-all alias.st status || die "Cannot alias git st"
git config --global --replace-all alias.sub \
  "submodule update --init --recursive" || die "Cannot alias git sub"
git config --global --replace-all color.ui auto \
  || die "Cannot enable git colors"
git config --global --replace-all core.autocrlf false \
  || die "Cannot set git autoclrf"
git config --global --replace-all core.excludesfile ~/.cvsignore \
  || die "Cannot set git excludes file"
git config --global --replace-all core.filemode false \
  || die "Cannot disable git filemode"
git config --global --replace-all http.cookiefile ~/.gitcookies \
  || die "Cannot set git cookie file"
git config --global --replace-all user.name "Rouslan Solomakhin" \
  || die "Cannot set git user name"

git submodule update --init --recursive || die "Cannot update submodules"

mkdir -pv ~/software/bin || die "Cannot create $HOME/software/bin dir"
mkdir -pv ~/.vim/swap || die "Cannot create the vim swap dir"
mkdir -pv ~/.vim/autoload || die "Cannot create vim autoload dir"

export GOPATH=$HOME/go || die "Cannot set the go path"
export PATH=$GOPATH/bin:$PATH || die "Cannot add $GOPATH/bin to the path"
export PATH=$HOME/software/bin:$PATH \
  || die "Cannot add $HOME/software/bin to the path"

CONFIGS="cvsignore tmux.conf vim/bundle bashrc bash_profile"
PROGS="cmake npm"

which apt-get >& /dev/null
if [ $? -ne 0 ]; then
  CONFIGS="$CONFIGS fluxbox/apps fluxbox/menu fluxbox/startup fluxbox/init fluxbox/keys fluxbox/windowmenu Xresources"
  PROGS="$PROGS curl golang fluxbox python-dev"
  for prog in $PROGS; do
    which $prog >& /dev/null
    if [ $? -ne 0 -o $FORCE -eq 1 ]; then
      sudo apt-get install $PROGS || die "Cannot install $prog"
    fi
  done
  ln -svf /usr/bin/nodejs ~/software/bin/node \
    || die "Cannot link node to nodejs"
else
  export PATH=$HOME/homebrew/bin:$PATH \
    || die "Cannot add $HOME/homebrew/bin to the path"
  which brew >& /dev/null
  if [ $? -ne 0 -o $FORCE -eq 1 ]; then
    echo "Installing homebrew"
    mkdir -pv ~/homebrew || die "Cannot create $HOME/homebrew dir"
    curl -L https://github.com/Homebrew/brew/tarball/master \
      | tar xz --strip 1 -C ~/homebrew \
      || die "Cannot download homebrew"
  else
    brew update || die "Cannot update homebrew formulae"
    brew upgrade --all || die "Cannot upgrade all homebrew packages"
  fi
  PROGS="$PROGS go bash vim clang-format tmux"
  for prog in $PROGS; do
    which $prog >& /dev/null
    if [ $? -ne 0 -o $FORCE -eq 1 ]; then
      brew install $PROGS || die "Cannot install $prog"
    fi
  done
fi

for file in $CONFIGS; do
  mkdir -pv ~/.`dirname $file` || die "Cannot create the dir for $file"
  [ -e ~/.$file ] || ln -sfv $PWD/$file ~/.$file \
    || die "Cannot link $file to home dir"
done

if [ ! -e ~/go/bin/gocode -o $FORCE -eq 1 ]; then
  go get github.com/nsf/gocode || die "Cannot get gocode package for go"
fi

NODE_MODULES="eslint eslint-config-google csslint tern"
for mod in $NODE_MODULES; do
  if [ ! -e ~/software/lib/node_modules/$mod -o $FORCE -eq 1 ]; then
    npm install --global --prefix=$HOME/software $mod \
      || die "Cannot install $mod"
  fi
done

if [ ! -e ~/.vim/autoload/pathogen.vim -o $FORCE -eq 1 ]; then
  echo "Installing vim-pathogen"
  curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim \
    || die "Cannot download vim-pathogen"
fi

YCM_OUTPUT=vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so
if [ ! -e $YCM_OUTPUT -o $FORCE -eq 1 ]; then
  pushd vim/bundle/YouCompleteMe || die "Cannot change dir"
  ./install.py --clang-completer --gocode-completer --tern-completer \
    || die "Cannot install YCM"
  popd || die "Cannot go back"
fi

[ -e ~/.fzf ] || ln -sfv $PWD/vim/bundle/fzf ~/.fzf \
  || die "Cannot link $HOME/.fzf"
if [ ! -e ~/.fzf/bin/fzf -o $FORCE -eq 1 ]; then
  pushd ~/.fzf || die "Cannot go to fzf dir"
  ./install --all || die "Cannot install fzf"
  popd || die "Cannot go back"
fi
